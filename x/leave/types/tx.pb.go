// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/leave/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ApplyLeaveRequest struct {
	Studentaddress string `protobuf:"bytes,1,opt,name=studentaddress,proto3" json:"studentaddress,omitempty"`
	Reason         string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	From           string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To             string `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *ApplyLeaveRequest) Reset()         { *m = ApplyLeaveRequest{} }
func (m *ApplyLeaveRequest) String() string { return proto.CompactTextString(m) }
func (*ApplyLeaveRequest) ProtoMessage()    {}
func (*ApplyLeaveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f21f4d27eb2a18, []int{0}
}
func (m *ApplyLeaveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyLeaveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyLeaveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyLeaveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyLeaveRequest.Merge(m, src)
}
func (m *ApplyLeaveRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplyLeaveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyLeaveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyLeaveRequest proto.InternalMessageInfo

func (m *ApplyLeaveRequest) GetStudentaddress() string {
	if m != nil {
		return m.Studentaddress
	}
	return ""
}

func (m *ApplyLeaveRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *ApplyLeaveRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ApplyLeaveRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type ApplyLeaveResponse struct {
	Leave *Leave `protobuf:"bytes,1,opt,name=leave,proto3" json:"leave,omitempty"`
}

func (m *ApplyLeaveResponse) Reset()         { *m = ApplyLeaveResponse{} }
func (m *ApplyLeaveResponse) String() string { return proto.CompactTextString(m) }
func (*ApplyLeaveResponse) ProtoMessage()    {}
func (*ApplyLeaveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f21f4d27eb2a18, []int{1}
}
func (m *ApplyLeaveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyLeaveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyLeaveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyLeaveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyLeaveResponse.Merge(m, src)
}
func (m *ApplyLeaveResponse) XXX_Size() int {
	return m.Size()
}
func (m *ApplyLeaveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyLeaveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyLeaveResponse proto.InternalMessageInfo

func (m *ApplyLeaveResponse) GetLeave() *Leave {
	if m != nil {
		return m.Leave
	}
	return nil
}

type AddStudentRequest struct {
	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Address      string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	AdminAddress string `protobuf:"bytes,4,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
}

func (m *AddStudentRequest) Reset()         { *m = AddStudentRequest{} }
func (m *AddStudentRequest) String() string { return proto.CompactTextString(m) }
func (*AddStudentRequest) ProtoMessage()    {}
func (*AddStudentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f21f4d27eb2a18, []int{2}
}
func (m *AddStudentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddStudentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddStudentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddStudentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddStudentRequest.Merge(m, src)
}
func (m *AddStudentRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddStudentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddStudentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddStudentRequest proto.InternalMessageInfo

func (m *AddStudentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AddStudentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddStudentRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddStudentRequest) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

type AddStudentResponse struct {
	Student *Student `protobuf:"bytes,1,opt,name=student,proto3" json:"student,omitempty"`
}

func (m *AddStudentResponse) Reset()         { *m = AddStudentResponse{} }
func (m *AddStudentResponse) String() string { return proto.CompactTextString(m) }
func (*AddStudentResponse) ProtoMessage()    {}
func (*AddStudentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f21f4d27eb2a18, []int{3}
}
func (m *AddStudentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddStudentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddStudentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddStudentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddStudentResponse.Merge(m, src)
}
func (m *AddStudentResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddStudentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddStudentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddStudentResponse proto.InternalMessageInfo

func (m *AddStudentResponse) GetStudent() *Student {
	if m != nil {
		return m.Student
	}
	return nil
}

type AddAdminRequest struct {
	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AdminAddress string `protobuf:"bytes,2,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *AddAdminRequest) Reset()         { *m = AddAdminRequest{} }
func (m *AddAdminRequest) String() string { return proto.CompactTextString(m) }
func (*AddAdminRequest) ProtoMessage()    {}
func (*AddAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f21f4d27eb2a18, []int{4}
}
func (m *AddAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddAdminRequest.Merge(m, src)
}
func (m *AddAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddAdminRequest proto.InternalMessageInfo

func (m *AddAdminRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AddAdminRequest) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *AddAdminRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AddAdminResponse struct {
	Admin *Admin `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (m *AddAdminResponse) Reset()         { *m = AddAdminResponse{} }
func (m *AddAdminResponse) String() string { return proto.CompactTextString(m) }
func (*AddAdminResponse) ProtoMessage()    {}
func (*AddAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f21f4d27eb2a18, []int{5}
}
func (m *AddAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddAdminResponse.Merge(m, src)
}
func (m *AddAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddAdminResponse proto.InternalMessageInfo

func (m *AddAdminResponse) GetAdmin() *Admin {
	if m != nil {
		return m.Admin
	}
	return nil
}

type AcceptLeaveRequest struct {
	AdminAddress string      `protobuf:"bytes,1,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	Leaveid      int64       `protobuf:"varint,2,opt,name=leaveid,proto3" json:"leaveid,omitempty"`
	Status       LeaveStatus `protobuf:"varint,3,opt,name=status,proto3,enum=cosmos.leave.v1.LeaveStatus" json:"status,omitempty"`
}

func (m *AcceptLeaveRequest) Reset()         { *m = AcceptLeaveRequest{} }
func (m *AcceptLeaveRequest) String() string { return proto.CompactTextString(m) }
func (*AcceptLeaveRequest) ProtoMessage()    {}
func (*AcceptLeaveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f21f4d27eb2a18, []int{6}
}
func (m *AcceptLeaveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcceptLeaveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcceptLeaveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcceptLeaveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptLeaveRequest.Merge(m, src)
}
func (m *AcceptLeaveRequest) XXX_Size() int {
	return m.Size()
}
func (m *AcceptLeaveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptLeaveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptLeaveRequest proto.InternalMessageInfo

func (m *AcceptLeaveRequest) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *AcceptLeaveRequest) GetLeaveid() int64 {
	if m != nil {
		return m.Leaveid
	}
	return 0
}

func (m *AcceptLeaveRequest) GetStatus() LeaveStatus {
	if m != nil {
		return m.Status
	}
	return LeaveStatus_STATUS_UNDEFINED
}

type AcceptLeaveResponse struct {
	Leave *Leave `protobuf:"bytes,1,opt,name=leave,proto3" json:"leave,omitempty"`
}

func (m *AcceptLeaveResponse) Reset()         { *m = AcceptLeaveResponse{} }
func (m *AcceptLeaveResponse) String() string { return proto.CompactTextString(m) }
func (*AcceptLeaveResponse) ProtoMessage()    {}
func (*AcceptLeaveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f21f4d27eb2a18, []int{7}
}
func (m *AcceptLeaveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcceptLeaveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcceptLeaveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcceptLeaveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptLeaveResponse.Merge(m, src)
}
func (m *AcceptLeaveResponse) XXX_Size() int {
	return m.Size()
}
func (m *AcceptLeaveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptLeaveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptLeaveResponse proto.InternalMessageInfo

func (m *AcceptLeaveResponse) GetLeave() *Leave {
	if m != nil {
		return m.Leave
	}
	return nil
}

func init() {
	proto.RegisterType((*ApplyLeaveRequest)(nil), "cosmos.leave.v1.ApplyLeaveRequest")
	proto.RegisterType((*ApplyLeaveResponse)(nil), "cosmos.leave.v1.ApplyLeaveResponse")
	proto.RegisterType((*AddStudentRequest)(nil), "cosmos.leave.v1.AddStudentRequest")
	proto.RegisterType((*AddStudentResponse)(nil), "cosmos.leave.v1.AddStudentResponse")
	proto.RegisterType((*AddAdminRequest)(nil), "cosmos.leave.v1.AddAdminRequest")
	proto.RegisterType((*AddAdminResponse)(nil), "cosmos.leave.v1.AddAdminResponse")
	proto.RegisterType((*AcceptLeaveRequest)(nil), "cosmos.leave.v1.AcceptLeaveRequest")
	proto.RegisterType((*AcceptLeaveResponse)(nil), "cosmos.leave.v1.AcceptLeaveResponse")
}

func init() { proto.RegisterFile("cosmos/leave/v1/tx.proto", fileDescriptor_80f21f4d27eb2a18) }

var fileDescriptor_80f21f4d27eb2a18 = []byte{
	// 489 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xc7, 0xb3, 0x9b, 0x36, 0x11, 0x53, 0x92, 0xd2, 0x41, 0xaa, 0xac, 0x80, 0x56, 0xc5, 0x45,
	0xc0, 0x01, 0x6d, 0xd4, 0xc0, 0x03, 0xb0, 0xe5, 0xc2, 0x01, 0x2e, 0xdb, 0x22, 0xa1, 0x5e, 0xd0,
	0x12, 0x9b, 0x6a, 0xa5, 0x66, 0xbd, 0xac, 0x9d, 0x90, 0x3e, 0x02, 0x37, 0x1e, 0x8b, 0x63, 0x8f,
	0x1c, 0x51, 0x22, 0xde, 0x03, 0xc5, 0xf6, 0x76, 0x3f, 0x9b, 0x03, 0x37, 0x7b, 0xe6, 0x3f, 0xe3,
	0xdf, 0x8c, 0xc7, 0x06, 0x32, 0x15, 0x72, 0x26, 0xe4, 0xf8, 0x8a, 0x47, 0x0b, 0x3e, 0x5e, 0x9c,
	0x8c, 0xd5, 0xd2, 0x4f, 0x33, 0xa1, 0x04, 0xee, 0x1b, 0x8f, 0xaf, 0x3d, 0xfe, 0xe2, 0x64, 0xf4,
	0xa8, 0x2e, 0x95, 0x2a, 0x52, 0xdc, 0xa8, 0xe9, 0x77, 0x38, 0x08, 0xd2, 0xf4, 0xea, 0xfa, 0xfd,
	0xc6, 0x19, 0xf2, 0x6f, 0x73, 0x2e, 0x15, 0x3e, 0x83, 0xa1, 0x54, 0x73, 0xc6, 0x13, 0x15, 0x31,
	0x96, 0x71, 0x29, 0x89, 0x73, 0xe4, 0xbc, 0xb8, 0x17, 0xd6, 0xac, 0x78, 0x08, 0xbd, 0x8c, 0x47,
	0x52, 0x24, 0xc4, 0xd5, 0x7e, 0xbb, 0x43, 0x84, 0x9d, 0xaf, 0x99, 0x98, 0x91, 0xae, 0xb6, 0xea,
	0x35, 0x0e, 0xc1, 0x55, 0x82, 0xec, 0x68, 0x8b, 0xab, 0x04, 0x3d, 0x05, 0x2c, 0x1f, 0x2c, 0x53,
	0x91, 0x48, 0x8e, 0x2f, 0x61, 0x57, 0x63, 0xea, 0x03, 0xf7, 0x26, 0x87, 0x7e, 0xad, 0x18, 0xdf,
	0xc8, 0x8d, 0x88, 0x2e, 0xe0, 0x20, 0x60, 0xec, 0xcc, 0x40, 0xe5, 0xf0, 0x43, 0x70, 0x63, 0x66,
	0x81, 0xdd, 0x98, 0x6d, 0x60, 0x92, 0x68, 0xc6, 0x2d, 0xa2, 0x5e, 0x23, 0x81, 0x7e, 0x5e, 0x99,
	0x61, 0xcc, 0xb7, 0x78, 0x0c, 0x83, 0x88, 0xcd, 0xe2, 0xe4, 0x73, 0xee, 0x37, 0xc4, 0xf7, 0xb5,
	0x31, 0x30, 0x36, 0xfa, 0x0e, 0xb0, 0x7c, 0xae, 0x65, 0x9f, 0x40, 0xdf, 0xf6, 0xc7, 0xd2, 0x93,
	0x06, 0x7d, 0x1e, 0x92, 0x0b, 0xe9, 0x05, 0xec, 0x07, 0x8c, 0x05, 0x9b, 0xe4, 0x77, 0xf1, 0x37,
	0x88, 0xdc, 0x26, 0xd1, 0x6d, 0x91, 0xdd, 0xa2, 0x48, 0xfa, 0x06, 0x1e, 0x14, 0xb9, 0x8b, 0xfe,
	0xea, 0xb8, 0x3b, 0xfb, 0x6b, 0xe4, 0x46, 0x44, 0x7f, 0x38, 0x80, 0xc1, 0x74, 0xca, 0x53, 0x55,
	0x19, 0x8f, 0x06, 0x91, 0xd3, 0x42, 0x44, 0xa0, 0xaf, 0x93, 0xc6, 0x4c, 0x03, 0x77, 0xc3, 0x7c,
	0x8b, 0xaf, 0xa1, 0xb7, 0x99, 0xc0, 0xb9, 0xe9, 0xfd, 0x70, 0xf2, 0xb8, 0xfd, 0x92, 0xcf, 0xb4,
	0x26, 0xb4, 0x5a, 0xfa, 0x16, 0x1e, 0x56, 0x50, 0xfe, 0x67, 0x60, 0x26, 0x7f, 0x5d, 0xd8, 0x3d,
	0x5f, 0x7e, 0x90, 0x97, 0x78, 0x0e, 0x83, 0x90, 0x5f, 0xc6, 0x52, 0xf1, 0x4c, 0x97, 0x8c, 0x47,
	0x2d, 0xad, 0xa8, 0x5c, 0xcc, 0xe8, 0xc9, 0x16, 0x85, 0xa5, 0xf9, 0x08, 0x50, 0x0c, 0x06, 0xd2,
	0xb6, 0x80, 0xea, 0xb4, 0x8e, 0x8e, 0xb7, 0x6a, 0x4a, 0x69, 0x6f, 0xdf, 0x4a, 0x5b, 0xda, 0xfa,
	0x0b, 0x6e, 0x4b, 0xdb, 0x7c, 0x6c, 0x9f, 0x60, 0xaf, 0xd4, 0x52, 0x6c, 0x89, 0x69, 0xdc, 0xfd,
	0xe8, 0xe9, 0x76, 0x91, 0xc9, 0x7c, 0xfa, 0xfc, 0xd7, 0xca, 0x73, 0x6e, 0x56, 0x9e, 0xf3, 0x67,
	0xe5, 0x39, 0x3f, 0xd7, 0x5e, 0xe7, 0x66, 0xed, 0x75, 0x7e, 0xaf, 0xbd, 0xce, 0xc5, 0x60, 0x69,
	0xff, 0x21, 0x75, 0x9d, 0x72, 0xf9, 0xa5, 0xa7, 0x7f, 0xa1, 0x57, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x9f, 0x49, 0x0c, 0x8c, 0xcf, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TxMsgClient is the client API for TxMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TxMsgClient interface {
	//adds a new admin
	RegisterAdmin(ctx context.Context, in *AddAdminRequest, opts ...grpc.CallOption) (*AddAdminResponse, error)
	//add new student
	AddStudent(ctx context.Context, in *AddStudentRequest, opts ...grpc.CallOption) (*AddStudentResponse, error)
	//apply leave
	ApplyLeave(ctx context.Context, in *ApplyLeaveRequest, opts ...grpc.CallOption) (*ApplyLeaveResponse, error)
	AcceptLeave(ctx context.Context, in *AcceptLeaveRequest, opts ...grpc.CallOption) (*AcceptLeaveResponse, error)
}

type txMsgClient struct {
	cc grpc1.ClientConn
}

func NewTxMsgClient(cc grpc1.ClientConn) TxMsgClient {
	return &txMsgClient{cc}
}

func (c *txMsgClient) RegisterAdmin(ctx context.Context, in *AddAdminRequest, opts ...grpc.CallOption) (*AddAdminResponse, error) {
	out := new(AddAdminResponse)
	err := c.cc.Invoke(ctx, "/cosmos.leave.v1.TxMsg/RegisterAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txMsgClient) AddStudent(ctx context.Context, in *AddStudentRequest, opts ...grpc.CallOption) (*AddStudentResponse, error) {
	out := new(AddStudentResponse)
	err := c.cc.Invoke(ctx, "/cosmos.leave.v1.TxMsg/AddStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txMsgClient) ApplyLeave(ctx context.Context, in *ApplyLeaveRequest, opts ...grpc.CallOption) (*ApplyLeaveResponse, error) {
	out := new(ApplyLeaveResponse)
	err := c.cc.Invoke(ctx, "/cosmos.leave.v1.TxMsg/ApplyLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txMsgClient) AcceptLeave(ctx context.Context, in *AcceptLeaveRequest, opts ...grpc.CallOption) (*AcceptLeaveResponse, error) {
	out := new(AcceptLeaveResponse)
	err := c.cc.Invoke(ctx, "/cosmos.leave.v1.TxMsg/AcceptLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TxMsgServer is the server API for TxMsg service.
type TxMsgServer interface {
	//adds a new admin
	RegisterAdmin(context.Context, *AddAdminRequest) (*AddAdminResponse, error)
	//add new student
	AddStudent(context.Context, *AddStudentRequest) (*AddStudentResponse, error)
	//apply leave
	ApplyLeave(context.Context, *ApplyLeaveRequest) (*ApplyLeaveResponse, error)
	AcceptLeave(context.Context, *AcceptLeaveRequest) (*AcceptLeaveResponse, error)
}

// UnimplementedTxMsgServer can be embedded to have forward compatible implementations.
type UnimplementedTxMsgServer struct {
}

func (*UnimplementedTxMsgServer) RegisterAdmin(ctx context.Context, req *AddAdminRequest) (*AddAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAdmin not implemented")
}
func (*UnimplementedTxMsgServer) AddStudent(ctx context.Context, req *AddStudentRequest) (*AddStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudent not implemented")
}
func (*UnimplementedTxMsgServer) ApplyLeave(ctx context.Context, req *ApplyLeaveRequest) (*ApplyLeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyLeave not implemented")
}
func (*UnimplementedTxMsgServer) AcceptLeave(ctx context.Context, req *AcceptLeaveRequest) (*AcceptLeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptLeave not implemented")
}

func RegisterTxMsgServer(s grpc1.Server, srv TxMsgServer) {
	s.RegisterService(&_TxMsg_serviceDesc, srv)
}

func _TxMsg_RegisterAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxMsgServer).RegisterAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.leave.v1.TxMsg/RegisterAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxMsgServer).RegisterAdmin(ctx, req.(*AddAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TxMsg_AddStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxMsgServer).AddStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.leave.v1.TxMsg/AddStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxMsgServer).AddStudent(ctx, req.(*AddStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TxMsg_ApplyLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxMsgServer).ApplyLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.leave.v1.TxMsg/ApplyLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxMsgServer).ApplyLeave(ctx, req.(*ApplyLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TxMsg_AcceptLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxMsgServer).AcceptLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.leave.v1.TxMsg/AcceptLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxMsgServer).AcceptLeave(ctx, req.(*AcceptLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TxMsg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.leave.v1.TxMsg",
	HandlerType: (*TxMsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAdmin",
			Handler:    _TxMsg_RegisterAdmin_Handler,
		},
		{
			MethodName: "AddStudent",
			Handler:    _TxMsg_AddStudent_Handler,
		},
		{
			MethodName: "ApplyLeave",
			Handler:    _TxMsg_ApplyLeave_Handler,
		},
		{
			MethodName: "AcceptLeave",
			Handler:    _TxMsg_AcceptLeave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/leave/v1/tx.proto",
}

func (m *ApplyLeaveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyLeaveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyLeaveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTx(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Studentaddress) > 0 {
		i -= len(m.Studentaddress)
		copy(dAtA[i:], m.Studentaddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Studentaddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplyLeaveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyLeaveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyLeaveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Leave != nil {
		{
			size, err := m.Leave.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddStudentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddStudentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddStudentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddStudentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddStudentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddStudentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Student != nil {
		{
			size, err := m.Student.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Admin != nil {
		{
			size, err := m.Admin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AcceptLeaveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptLeaveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcceptLeaveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Leaveid != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Leaveid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AcceptLeaveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptLeaveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcceptLeaveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Leave != nil {
		{
			size, err := m.Leave.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApplyLeaveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Studentaddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *ApplyLeaveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Leave != nil {
		l = m.Leave.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *AddStudentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *AddStudentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Student != nil {
		l = m.Student.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *AddAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *AddAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Admin != nil {
		l = m.Admin.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *AcceptLeaveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Leaveid != 0 {
		n += 1 + sovTx(uint64(m.Leaveid))
	}
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	return n
}

func (m *AcceptLeaveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Leave != nil {
		l = m.Leave.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApplyLeaveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyLeaveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyLeaveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Studentaddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Studentaddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyLeaveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyLeaveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyLeaveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Leave == nil {
				m.Leave = &Leave{}
			}
			if err := m.Leave.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddStudentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddStudentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddStudentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddStudentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddStudentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddStudentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Student", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Student == nil {
				m.Student = &Student{}
			}
			if err := m.Student.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Admin == nil {
				m.Admin = &Admin{}
			}
			if err := m.Admin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptLeaveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptLeaveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptLeaveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leaveid", wireType)
			}
			m.Leaveid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leaveid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= LeaveStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptLeaveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptLeaveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptLeaveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Leave == nil {
				m.Leave = &Leave{}
			}
			if err := m.Leave.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
